package com.example.Controller;

import com.example.dao.PaperDao;
import com.example.model.Paper;
import com.example.model.User;

import java.sql.Connection;
import java.sql.SQLException;
import java.util.List;

public class PaperController {
    private PaperDao paperDao;

    public PaperController(Connection connection) {
        this.paperDao = new PaperDao(connection);
    }

    public List<Paper> getPapersByUser(User user) {
        if (user == null) {
            return null;
        }
        return paperDao.getPapersByUser(user.getId());
    }

    public boolean submitPaper(User user, String title, String pdfUrl) {
        if (user == null) {
            return false;
        }

        Paper paper = new Paper(user.getId(), title, pdfUrl);
        return paperDao.submitPaper(paper);
    }

    public boolean deletePaper(User user, int paperId) {
        if (user == null) {
            return false;
        }

        return paperDao.deletePaper(paperId);
    }
}

package com.example.Controller;

import com.example.dao.UserDao;
import com.example.model.User;

import java.sql.Connection;

public class UserController {
    private UserDao userDao;

    public UserController(Connection connection) {
        this.userDao = new UserDao(connection);
    }

    public User loginUser(String username, String password) {
        return userDao.getUserByUsernameAndPassword(username, password);
    }
}

package com.example.dao;

import com.example.model.Paper;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

public class PaperDao {
    private Connection connection;

    // 带 Connection 参数的构造器
    public PaperDao(Connection connection) {
        this.connection = connection;
    }

    public List<Paper> getPapersByUser(int userId) {
        List<Paper> papers = new ArrayList<>();
        String sql = "SELECT id, user_id, title, pdf_url FROM papers WHERE user_id = ?";

        try (PreparedStatement stmt = connection.prepareStatement(sql)) {
            stmt.setInt(1, userId);
            ResultSet rs = stmt.executeQuery();

            while (rs.next()) {
                Paper paper = new Paper();
                paper.setId(rs.getInt("id"));
                paper.setUserId(rs.getInt("user_id"));
                paper.setTitle(rs.getString("title"));
                paper.setPdfUrl(rs.getString("pdf_url"));
                papers.add(paper);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }

        return papers;
    }

    public boolean deletePaper(int paperId) {
        String sql = "DELETE FROM papers WHERE id = ?";
        try (PreparedStatement stmt = connection.prepareStatement(sql)) {
            stmt.setInt(1, paperId);
            int rowsAffected = stmt.executeUpdate();
            return rowsAffected > 0;
        } catch (SQLException e) {
            e.printStackTrace();
            return false;
        }
    }

    public boolean submitPaper(Paper paper) {
        String sql = "INSERT INTO papers (user_id, title, pdf_url) VALUES (?, ?, ?)";
        try (PreparedStatement stmt = connection.prepareStatement(sql)) {
            stmt.setInt(1, paper.getUserId());
            stmt.setString(2, paper.getTitle());
            stmt.setString(3, paper.getPdfUrl());
            int rowsAffected = stmt.executeUpdate();
            return rowsAffected > 0;
        } catch (SQLException e) {
            e.printStackTrace();
            return false;
        }
    }
}

package com.example.dao;

import com.example.model.User;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

public class UserDao {
    private Connection connection;

    public UserDao(Connection connection) {
        this.connection = connection;
    }

    // 添加 getUserByUsernameAndPassword 方法
    public User getUserByUsernameAndPassword(String username, String password) {
        String sql = "SELECT id, username, password FROM users WHERE username = ? AND password = ?";
        try (PreparedStatement stmt = connection.prepareStatement(sql)) {
            stmt.setString(1, username);
            stmt.setString(2, password);
            ResultSet rs = stmt.executeQuery();
            if (rs.next()) {
                User user = new User();
                user.setId(rs.getInt("id"));
                user.setUsername(rs.getString("username"));
                user.setPassword(rs.getString("password"));
                return user;
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return null;
    }

    // 添加 registerUser 方法
    public boolean registerUser(User user) {
        String sql = "INSERT INTO users (username, password) VALUES (?, ?)";
        try (PreparedStatement stmt = connection.prepareStatement(sql)) {
            stmt.setString(1, user.getUsername());
            stmt.setString(2, user.getPassword());
            int rowsAffected = stmt.executeUpdate();
            return rowsAffected > 0;
        } catch (SQLException e) {
            e.printStackTrace();
            return false;
        }
    }
}

package com.example.main;

import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClients;
import org.apache.http.util.EntityUtils;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.NodeList;
import org.xml.sax.InputSource;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import java.io.StringReader;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;

public class ArxivFetcher {

    private static final String ARXIV_API_URL = "http://export.arxiv.org/api/query?search_query=all:electron&start=0&max_results=5";

    public static void main(String[] args) {
        try (CloseableHttpClient httpClient = HttpClients.createDefault()) {
            HttpGet request = new HttpGet(ARXIV_API_URL);
            HttpResponse response = httpClient.execute(request);
            HttpEntity entity = response.getEntity();
            if (entity != null) {
                String result = EntityUtils.toString(entity);
                parseAndStorePapers(result);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private static void parseAndStorePapers(String xml) {
        try {
            DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
            DocumentBuilder builder = factory.newDocumentBuilder();
            Document doc = builder.parse(new InputSource(new StringReader(xml)));
            NodeList entries = doc.getElementsByTagName("entry");

            for (int i = 0; i < entries.getLength(); i++) {
                Element entry = (Element) entries.item(i);
                String title = entry.getElementsByTagName("title").item(0).getTextContent();
                String summary = entry.getElementsByTagName("summary").item(0).getTextContent();
                String pdfLink = entry.getElementsByTagName("id").item(0).getTextContent(); // 获取PDF链接

                boolean success = storePaperInDatabase(title, summary, pdfLink);
                if (success) {
                    System.out.println("Stored paper: " + title);
                } else {
                    System.out.println("Failed to store paper: " + title);
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private static boolean storePaperInDatabase(String title, String content, String pdfUrl) {
        String jdbcUrl = "jdbc:mysql://localhost:3306/paper_management";
        String jdbcUser = "root";
        String jdbcPassword = "zjjd123*";

        try (Connection connection = DriverManager.getConnection(jdbcUrl, jdbcUser, jdbcPassword)) {
            String sql = "INSERT INTO papers (user_id, title, content, pdf_url) VALUES (?, ?, ?, ?)";
            try (PreparedStatement stmt = connection.prepareStatement(sql)) {
                stmt.setInt(1, 1);  // 假设所有论文都由用户ID为1的用户添加
                stmt.setString(2, title);
                stmt.setString(3, content);
                stmt.setString(4, pdfUrl); // 插入PDF链接
                stmt.executeUpdate();
                return true; // If no exception, return true
            }
        } catch (Exception e) {
            e.printStackTrace();
            return false; // If exception occurs, return false
        }
    }
}

package com.example.model;

public class Paper {
    private int id;
    private int userId;
    private String title;
    private String pdfUrl;

    // Constructors
    public Paper() {}

    public Paper(int userId, String title, String pdfUrl) {
        this.userId = userId;
        this.title = title;
        this.pdfUrl = pdfUrl;
    }

    // Getters and Setters
    public int getId() {
        return id;
    }

    public void setId(int id) {
        this.id = id;
    }

    public int getUserId() {
        return userId;
    }

    public void setUserId(int userId) {
        this.userId = userId;
    }

    public String getTitle() {
        return title;
    }

    public void setTitle(String title) {
        this.title = title;
    }

    public String getPdfUrl() {
        return pdfUrl;
    }

    public void setPdfUrl(String pdfUrl) {
        this.pdfUrl = pdfUrl;
    }
}

package com.example.model;

public class User {
    private int id;
    private String username;
    private String password;

    public User() {}

    public User(String username, String password) {
        this.username = username;
        this.password = password;
    }

    // Getters and Setters
    public int getId() {
        return id;
    }

    public void setId(int id) {
        this.id = id;
    }

    public String getUsername() {
        return username;
    }

    public void setUsername(String username) {
        this.username = username;
    }

    public String getPassword() {
        return password;
    }

    public void setPassword(String password) {
        this.password = password;
    }
}

package com.example.servlet;

import com.example.dao.PaperDao;
import com.example.util.DatabaseConnection;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.sql.Connection;

@WebServlet("/delete_paper_22")
public class DeletePaperServlet extends HttpServlet {
    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        int paperId = Integer.parseInt(request.getParameter("paperId"));

        try (Connection connection = DatabaseConnection.getConnection()) {
            // 确保使用带 Connection 参数的构造器
            PaperDao paperDao = new PaperDao(connection);
            if (paperDao.deletePaper(paperId)) {
                response.sendRedirect("/view_papers_22");
            } else {
                response.sendRedirect("/view_papers_22?error=1");
            }
        } catch (Exception e) {
            e.printStackTrace();
            response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, "Internal server error");
        }
    }
}

package com.example.servlet;

import com.example.Controller.UserController;
import com.example.model.User;
import com.example.util.DatabaseConnection;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import java.io.IOException;
import java.sql.Connection;
import java.sql.SQLException;

@WebServlet("/login_22")
public class LoginServlet extends HttpServlet {
    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        String username = request.getParameter("username");
        String password = request.getParameter("password");

        try (Connection connection = DatabaseConnection.getConnection()) {
            if (connection == null) {
                throw new SQLException("Unable to establish a database connection");
            }

            UserController userController = new UserController(connection);
            User user = userController.loginUser(username, password);

            if (user != null) {
                HttpSession session = request.getSession();
                session.setAttribute("user", user);
                response.sendRedirect("view_papers_22.jsp"); // 确认这个路径是存在的
            } else {
                response.sendRedirect("login_22.jsp?error=1");
            }
        } catch (Exception e) {
            e.printStackTrace(); // Print stack trace to server logs
            response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, "Internal server error");
        }
    }
}

package com.example.servlet;

import com.example.dao.UserDao;
import com.example.model.User;
import com.example.util.DatabaseConnection;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.sql.Connection;
import java.sql.SQLException;

@WebServlet("/register_22")
public class RegisterServlet extends HttpServlet {
    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        String username = request.getParameter("username");
        String password = request.getParameter("password");

        try (Connection connection = DatabaseConnection.getConnection()) {
            if (connection == null) {
                throw new SQLException("Unable to establish a database connection");
            }

            User user = new User(username, password);
            UserDao userDao = new UserDao(connection);

            if (userDao.registerUser(user)) {
                response.sendRedirect("login_22.jsp");
            } else {
                response.sendRedirect("register_22.jsp?error=1");
            }
        } catch (Exception e) {
            e.printStackTrace(); // Print stack trace to server logs
            response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, "Internal server error");
        }
    }
}

package com.example.servlet;

import com.example.dao.PaperDao;
import com.example.model.Paper;
import com.example.model.User;
import com.example.util.DatabaseConnection;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import java.io.IOException;
import java.sql.Connection;

@WebServlet("/submit_paper_22")
public class SubmitPaperServlet extends HttpServlet {
    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        HttpSession session = request.getSession();
        User user = (User) session.getAttribute("user");

        if (user != null) {
            String title = request.getParameter("title");
            String pdfUrl = request.getParameter("pdf_url");

            Paper paper = new Paper(user.getId(), title, pdfUrl);

            try (Connection connection = DatabaseConnection.getConnection()) {
                PaperDao paperDao = new PaperDao(connection);
                if (paperDao.submitPaper(paper)) {
                    response.sendRedirect("/view_papers_22");
                } else {
                    response.sendRedirect("submit_paper_22.jsp?error=1");
                }
            } catch (Exception e) {
                e.printStackTrace();
                response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, "Internal server error");
            }
        } else {
            response.sendRedirect("login_22.jsp");
        }
    }
}

package com.example.servlet;

import com.example.Controller.PaperController;
import com.example.model.Paper;
import com.example.model.User;
import com.example.util.DatabaseConnection;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import java.io.IOException;
import java.sql.Connection;
import java.sql.SQLException;
import java.util.List;

@WebServlet("/view_papers_22")
public class ViewPapersServlet extends HttpServlet {
    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        HttpSession session = request.getSession();
        User user = (User) session.getAttribute("user");

        if (user == null) {
            response.sendRedirect("login_22.jsp");
            return;
        }

        try (Connection connection = DatabaseConnection.getConnection()) {
            if (connection == null) {
                throw new SQLException("Unable to establish a database connection");
            }

            PaperController paperController = new PaperController(connection);
            List<Paper> papers = paperController.getPapersByUser(user);

            request.setAttribute("papers", papers);
            request.getRequestDispatcher("/WEB-INF/jsp/view_papers_22.jsp").forward(request, response);
        } catch (Exception e) {
            e.printStackTrace(); // Print stack trace to server logs
            response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, "Internal server error");
        }
    }
}

package com.example.util;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;

public class DatabaseConnection {
    private static final String URL = "jdbc:mysql://localhost:3306/paper_management";
    private static final String USER = "root";
    private static final String PASSWORD = "zjjd123*"; // 确保这里的密码正确

    public static Connection getConnection() {
        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            return DriverManager.getConnection(URL, USER, PASSWORD);
        } catch (SQLException | ClassNotFoundException e) {
            e.printStackTrace();
            return null;
        }
    }
}

<%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%>
<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>论文管理系统 - 欢迎页面</title>
</head>
<body>
<div class="container">
    <h1>欢迎使用论文管理系统</h1>
    <p><a href="login_22.jsp">登录</a> | <a href="register_22.jsp">注册</a></p>
</div>
</body>
</html>


<%--
  Created by IntelliJ IDEA.
  User: 黄达君
  Date: 2024/12/25
  Time: 23:02
  To change this template use File | Settings | File Templates.
--%>
<%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%>
<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>登录</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            background-color: #f8f9fa;
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            margin: 0;
        }
        .login-container {
            background-color: #fff;
            padding: 2rem;
            border-radius: 8px;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
            width: 100%;
            max-width: 400px;
            text-align: center;
        }
        h1 {
            margin-bottom: 1.5rem;
            color: #007bff;
        }
        .form-group {
            display: flex;
            flex-direction: column;
            margin-top: 1rem;
        }
        .form-group.inline {
            flex-direction: row;
            align-items: center;
            justify-content: space-between;
        }
        .form-group label {
            flex: 1;
            margin-right: 0.5rem;
            font-weight: bold;
        }
        .form-group input[type="text"],
        .form-group input[type="password"] {
            flex: 2;
            padding: 0.5rem 1rem;
            border: 1px solid #ced4da;
            border-radius: 4px;
            box-sizing: border-box;
        }
        input[type="submit"] {
            width: 100%;
            padding: 0.75rem;
            background-color: #007bff;
            border: none;
            border-radius: 4px;
            color: white;
            font-size: 1rem;
            cursor: pointer;
            margin-top: 1.5rem;
        }
        input[type="submit"]:hover {
            background-color: #0056b3;
        }
        .error {
            color: red;
            margin-top: 1rem;
        }
    </style>
</head>
<body>
<div class="login-container">
    <h1>登录</h1>
    <form action="${pageContext.request.contextPath}/user" method="post">
        <input type="hidden" name="action" value="login">

        <!-- Username and password fields with labels on the same line -->
        <div class="form-group inline">
            <label for="username">用户名:</label>
            <input type="text" id="username" name="username" placeholder="请输入用户名" required>
        </div>
        <div class="form-group inline">
            <label for="password">密码:</label>
            <input type="password" id="password" name="password" placeholder="请输入密码" required>
        </div>

        <input type="submit" value="登录">
        <c:if test="${not empty error}">
            <p class="error">${error}</p>
        </c:if>
    </form>
</div>
</body>
</html>

<%--
  Created by IntelliJ IDEA.
  User: 黄达君
  Date: 2024/12/25
  Time: 23:02
  To change this template use File | Settings | File Templates.
--%>
<%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%>
<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>论文管理系统 - 注册</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            background-color: #f4f4f9;
            color: #333;
            margin: 0;
            padding: 0;
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
        }
        .container {
            text-align: center;
            background: #fff;
            padding: 2rem;
            border-radius: 8px;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
            width: 100%;
            max-width: 400px;
        }
        h1 {
            margin-bottom: 1.5rem;
            color: #2c3e50;
        }
        form {
            display: flex;
            flex-direction: column;
        }
        .form-group {
            display: flex;
            flex-direction: row;
            align-items: center;
            justify-content: space-between;
            margin-top: 1rem;
        }
        .form-group label {
            flex: 1;
            margin-right: 0.5rem;
            font-weight: bold;
        }
        .form-group input[type="text"],
        .form-group input[type="password"] {
            flex: 2;
            padding: 0.5rem;
            border: 1px solid #ccc;
            border-radius: 4px;
        }
        input[type="submit"] {
            margin-top: 1rem;
            padding: 0.75rem;
            background-color: #2980b9;
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
        }
        input[type="submit"]:hover {
            background-color: #3498db;
        }
        .error-message {
            color: red;
            margin-top: 1rem;
        }
    </style>
</head>
<body>
<div class="container">
    <h1>注册</h1>
    <form action="register_22" method="post">
        <div class="form-group">
            <label for="username">用户名:</label>
            <input type="text" id="username" name="username" required>
        </div>

        <div class="form-group">
            <label for="password">密码:</label>
            <input type="password" id="password" name="password" required>
        </div>

        <input type="submit" value="注册">

        <% if (request.getParameter("error") != null) { %>
        <p class="error-message">注册失败，用户名可能已存在。</p>
        <% } %>
    </form>
</div>
</body>
</html>


<%--
  Created by IntelliJ IDEA.
  User: 黄达君
  Date: 2024/12/25
  Time: 23:03
  To change this template use File | Settings | File Templates.
--%>
<%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%>
<!DOCTYPE html>
<html>
<head>
    <title>提交论文</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 20px;
        }
        form {
            max-width: 400px;
            margin: auto;
        }
        label {
            display: block;
            margin-top: 10px;
        }
        input[type="text"] {
            width: 100%;
            padding: 8px;
            margin-top: 5px;
            margin-bottom: 10px;
            border: 1px solid #ccc;
            border-radius: 4px;
        }
        input[type="submit"] {
            background-color: #4CAF50;
            color: white;
            padding: 10px 15px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
        }
        input[type="submit"]:hover {
            background-color: #45a049;
        }
        .error {
            color: red;
            margin-top: 10px;
        }
    </style>
</head>
<body>
<h1>提交论文</h1>
<form action="${pageContext.request.contextPath}/papers" method="post">
    <input type="hidden" name="action" value="submit">
    <label for="title">标题:</label>
    <input type="text" id="title" name="title" required><br>
    <label for="pdfUrl">PDF URL:</label>
    <input type="text" id="pdfUrl" name="pdf_url" required><br>
    <input type="submit" value="提交">
    <c:if test="${not empty error}">
        <p class="error">${error}</p>
    </c:if>
</form>
</body>
</html>

<%@ page import="com.example.model.Paper" %>
<%@ page import="java.util.List" %><%--
  Created by IntelliJ IDEA.
  User: 黄达君
  Date: 2024/12/25
  Time: 23:03
  To change this template use File | Settings | File Templates.
--%>
<%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c" %>
<%@ taglib uri="http://java.sun.com/jsp/jstl/functions" prefix="fn" %>
<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>查看论文</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 20px;
        }
        h1 {
            color: #333;
        }
        .paper {
            border: 1px solid #ccc;
            padding: 10px;
            margin: 10px 0;
        }
        .paper h2 {
            margin: 0 0 10px 0;
        }
        .paper a {
            color: #0066cc;
            text-decoration: none;
        }
        .paper a:hover {
            text-decoration: underline;
        }
        .paper form {
            display: inline;
        }
        .nav {
            margin-bottom: 20px;
        }
        .nav a {
            margin-right: 15px;
            text-decoration: none;
            color: #0066cc;
        }
        .nav a:hover {
            text-decoration: underline;
        }
    </style>
    <script>
        function confirmDelete() {
            return confirm("你确定要删除这篇论文吗？");
        }
    </script>
</head>
<body>
<div class="nav">
    <a href="home.jsp">主页</a>
    <a href="logout.jsp">登出</a>
</div>
<h1>查看论文</h1>
<c:choose>
    <c:when test="${not empty papers}">
        <p>找到 ${fn:length(papers)} 篇论文。</p>
        <c:forEach var="paper" items="${papers}">
            <div class="paper">
                <h2>${paper.title}</h2>
                <p><a href="${paper.pdfUrl}" target="_blank">查看PDF</a></p>
                <form action="delete_paper_22" method="post" onsubmit="return confirmDelete();">
                    <input type="hidden" name="paperId" value="${paper.id}">
                    <input type="submit" value="删除">
                </form>
            </div>
        </c:forEach>
    </c:when>
    <c:otherwise>
        <p>没有论文。</p>
    </c:otherwise>
</c:choose>
</body>
</html>

